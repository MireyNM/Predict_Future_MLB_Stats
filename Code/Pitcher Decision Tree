import pandas as pd
from pybaseball import pitching_stats
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import OneHotEncoder

# Get the data using PyBaseball
data = pitching_stats()

# Filter the data to only include relevant columns
data = data[["Name", "Team", "Throws", "pitch_type", "release_speed"]]

# Rename the columns to match the original code
data = data.rename(columns={"pitch_type": "type_of_pitch", "release_speed": "speed_in_mph"})

# Split the data into features (X) and target variable (y)
X = data[["type_of_pitch", "speed_in_mph"]]
y = data["average_pitcher_time"]

# Use one-hot encoding to handle categorical data (type of pitch)
one_hot = OneHotEncoder(handle_unknown='ignore')
type_of_pitch_encoded = one_hot.fit_transform(X[["type_of_pitch"]]).toarray()
X = X.drop("type_of_pitch", axis=1)
X = pd.concat([X, pd.DataFrame(type_of_pitch_encoded)], axis=1)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = DecisionTreeRegressor()
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model's performance
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Check the shape of the data
print("Data Shape:", data.shape)

# Check the first five rows of the data
print("Data Head:")
print(data.head())

# Check the shape of the features (X)
print("X Shape:", X.shape)

# Check the first five rows of the features (X)
print("X Head:")
print(X.head())

# Check the shape of the target variable (y)
print("y Shape:", y.shape)

# Check the first five values of the target variable (y)
print("y Head:")
print(y.head())

# Check the shape of the training set
print("X_train Shape:", X_train.shape)
print("y_train Shape:", y_train.shape)

# Check the shape of the testing set
print("X_test Shape:", X_test.shape)
print("y_test Shape:", y_test.shape)

# Check the feature importances of the model
print("Feature Importances:")
print(model.feature_importances_)
